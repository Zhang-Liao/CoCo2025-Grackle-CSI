YES

Problem:
 +(x,0()) -> x
 +(x,s(y)) -> s(+(x,y))
 +(0(),y) -> y
 +(s(x),y) -> s(+(x,y))
 dbl(x) -> +(x,x)
 +(+(x,y),z) -> +(x,+(y,z))
 +(x,y) -> +(y,x)
 s(x) -> s(s(x))
 s(s(x)) -> s(x)

Proof:
 Church Rosser Transformation Processor (critical pair closing system, Thm 2.4):
  strict:
   
  weak:
   +(x,0()) -> x
   +(x,s(y)) -> s(+(x,y))
   +(0(),y) -> y
   +(s(x),y) -> s(+(x,y))
   dbl(x) -> +(x,x)
   +(+(x,y),z) -> +(x,+(y,z))
   +(x,y) -> +(y,x)
   s(x) -> s(s(x))
   s(s(x)) -> s(x)
  original problem:
   +(x272,0()) -> x272
   +(0(),x274) -> x274
   +(s(x278),x277) -> s(+(x278,x277))
   +(x280,s(x279)) -> s(+(x280,x279))
   +(+(x283,x282),x281) -> +(x283,+(x282,x281))
   +(x304,x303) -> +(x303,x304)
   s(s(x404)) -> s(x404)
   s(x420) -> s(s(x420))
  critical peaks: 
   Shift Processor (no label):
    +(x272,0()) -> x272
    +(0(),x274) -> x274
    +(s(x278),x277) -> s(+(x278,x277))
    +(x280,s(x279)) -> s(+(x280,x279))
    +(+(x283,x282),x281) -> +(x283,+(x282,x281))
    +(x304,x303) -> +(x303,x304)
    s(s(x404)) -> s(x404)
    s(x420) -> s(s(x420))
    AT confluence processor
     Complete TRS T' of input TRS:
     +(x272,0()) -> x272
     +(0(),x274) -> x274
     +(s(x278),x277) -> s(+(x278,x277))
     +(x280,s(x279)) -> s(+(x280,x279))
     +(+(x283,x282),x281) -> +(x283,+(x282,x281))
     +(x304,x303) -> +(x303,x304)
     s(s(x404)) -> s(x404)
     s(x420) -> s(s(x420))
     
      T' = (P union S) with
     
      TRS P:+(+(x283,x282),x281) -> +(x283,+(x282,x281))
            +(x304,x303) -> +(x303,x304)
            s(s(x404)) -> s(x404)
            s(x420) -> s(s(x420))
     
      TRS S:+(x272,0()) -> x272
            +(0(),x274) -> x274
            +(s(x278),x277) -> s(+(x278,x277))
            +(x280,s(x279)) -> s(+(x280,x279))
     
     S is left-linear and P is reversible.
     
      CP(S,S) = 
     0() = 0(), s(x278) = s(+(x278,0())), s(x279) = s(+(0(),x279)), s(+(x1257,0())) = 
     s(x1257), s(+(x1259,s(x279))) = s(+(s(x1259),x279)), s(+(0(),x1262)) = 
     s(x1262), s(+(s(x278),x1264)) = s(+(x278,s(x1264)))
     
      CP(S,P union P^-1) = 
     +(x283,x282) = +(x283,+(x282,0())), +(x283,x281) = +(x283,+(0(),x281)), 
     x304 = +(0(),x304), +(x283,x282) = +(+(x283,x282),0()), x303 = +(0(),x303), 
     +(x282,x281) = +(0(),+(x282,x281)), x303 = +(x303,0()), +(x282,x281) = 
     +(+(0(),x282),x281), +(x283,x281) = +(+(x283,0()),x281), x304 = 
     +(x304,0()), +(s(+(x1347,x282)),x281) = +(s(x1347),+(x282,x281)), 
     s(+(x1349,x303)) = +(x303,s(x1349)), s(+(x1351,+(x282,x281))) = 
     +(+(s(x1351),x282),x281), +(x283,s(+(x1353,x281))) = +(+(x283,s(x1353)),x281), 
     s(+(x1355,x304)) = +(x304,s(x1355)), s(+(+(x283,x282),x1358)) = 
     +(x283,+(x282,s(x1358))), +(s(+(x283,x1360)),x281) = +(x283,+(s(x1360),x281)), 
     s(+(x304,x1362)) = +(s(x1362),x304), +(x283,s(+(x282,x1364))) = 
     +(+(x283,x282),s(x1364)), s(+(x303,x1366)) = +(s(x1366),x303)
     
     
      CP_in(P union P^-1,S) = 
     +(s(x1423),x277) = s(+(s(x1423),x277)), +(x280,s(x1424)) = s(+(x280,s(x1424))), 
     +(s(s(x278)),x277) = s(+(x278,x277)), +(x280,s(s(x279))) = s(+(x280,x279)), 
     +(s(x1429),x277) = s(+(s(x1429),x277)), +(x280,s(x1430)) = s(+(x280,s(x1430)))
     
     
     We have to check termination of S:
     
     Matrix Interpretation Processor: dim=1
      
      interpretation:
       [+](x0, x1) = 4x0 + 7x1,
       
       [0] = 0,
       
       [s](x0) = x0 + 4
      orientation:
       +(x272,0()) = 4x272 >= x272 = x272
       
       +(0(),x274) = 7x274 >= x274 = x274
       
       +(s(x278),x277) = 7x277 + 4x278 + 16 >= 7x277 + 4x278 + 4 = s(+(x278,x277))
       
       +(x280,s(x279)) = 7x279 + 4x280 + 28 >= 7x279 + 4x280 + 4 = s(+(x280,x279))
      problem:
       +(x272,0()) -> x272
       +(0(),x274) -> x274
      Matrix Interpretation Processor: dim=1
       
       interpretation:
        [+](x0, x1) = x0 + x1 + 3,
        
        [0] = 4
       orientation:
        +(x272,0()) = x272 + 7 >= x272 = x272
        
        +(0(),x274) = x274 + 7 >= x274 = x274
       problem:
        
       Qed

