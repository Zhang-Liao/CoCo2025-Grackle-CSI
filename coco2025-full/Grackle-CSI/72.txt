YES

Problem:
 f(g(g(x))) -> a()
 f(g(h(x))) -> b()
 f(h(g(x))) -> b()
 f(h(h(x))) -> c()
 g(x) -> h(x)
 a() -> b()
 b() -> c()

Proof:
 AT confluence processor
  Complete TRS T' of input TRS:
  f(g(g(x))) -> a()
  f(g(h(x))) -> b()
  f(h(g(x))) -> b()
  f(h(h(x))) -> c()
  g(x) -> h(x)
  a() -> b()
  b() -> c()
  
   T' = (P union S) with
  
   TRS P:
  
   TRS S:f(g(g(x))) -> a()
         f(g(h(x))) -> b()
         f(h(g(x))) -> b()
         f(h(h(x))) -> c()
         g(x) -> h(x)
         a() -> b()
         b() -> c()
  
  S is left-linear and P is reversible.
  
   CP(S,S) = 
  f(h(g(x))) = a(), f(g(h(x))) = a(), f(h(h(x))) = b()
  
   CP(S,P union P^-1) = 
  
  
   CP_in(P union P^-1,S) = 
  
  
  We have to check termination of S:
  
  Matrix Interpretation Processor: dim=1
   
   interpretation:
    [b] = 0,
    
    [f](x0) = x0 + 2,
    
    [h](x0) = 2x0,
    
    [c] = 0,
    
    [g](x0) = 2x0,
    
    [a] = 0
   orientation:
    f(g(g(x))) = 4x + 2 >= 0 = a()
    
    f(g(h(x))) = 4x + 2 >= 0 = b()
    
    f(h(g(x))) = 4x + 2 >= 0 = b()
    
    f(h(h(x))) = 4x + 2 >= 0 = c()
    
    g(x) = 2x >= 2x = h(x)
    
    a() = 0 >= 0 = b()
    
    b() = 0 >= 0 = c()
   problem:
    g(x) -> h(x)
    a() -> b()
    b() -> c()
   Matrix Interpretation Processor: dim=1
    
    interpretation:
     [b] = 4,
     
     [h](x0) = 4x0,
     
     [c] = 0,
     
     [g](x0) = 4x0,
     
     [a] = 4
    orientation:
     g(x) = 4x >= 4x = h(x)
     
     a() = 4 >= 4 = b()
     
     b() = 4 >= 0 = c()
    problem:
     g(x) -> h(x)
     a() -> b()
    Matrix Interpretation Processor: dim=1
     
     interpretation:
      [b] = 0,
      
      [h](x0) = 4x0,
      
      [g](x0) = 4x0,
      
      [a] = 1
     orientation:
      g(x) = 4x >= 4x = h(x)
      
      a() = 1 >= 0 = b()
     problem:
      g(x) -> h(x)
     Matrix Interpretation Processor: dim=1
      
      interpretation:
       [h](x0) = 4x0,
       
       [g](x0) = 4x0 + 1
      orientation:
       g(x) = 4x + 1 >= 4x = h(x)
      problem:
       
      Qed

